/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package mephi.b22901.ae.exam.GUI;

import java.io.IOException;
import java.util.List;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import mephi.b22901.ae.exam.Client;
import mephi.b22901.ae.exam.DAO.EmployeeDAO;
import mephi.b22901.ae.exam.DAO.PartDAO;
import mephi.b22901.ae.exam.DAO.RequestPartDAO;
import mephi.b22901.ae.exam.DAO.RequestServiceDAO;
import mephi.b22901.ae.exam.DAO.ServiceDAO;
import mephi.b22901.ae.exam.Invoice;
import mephi.b22901.ae.exam.Logic.CarServiceLogic;
import mephi.b22901.ae.exam.Part;
import mephi.b22901.ae.exam.Request;
import mephi.b22901.ae.exam.RequestPart;
import mephi.b22901.ae.exam.RequestService;
import mephi.b22901.ae.exam.Service;

/**
 *
 * @author artyom_egorkin
 */
public class InvoiceFrame extends javax.swing.JFrame {
    private final CarServiceLogic logic;
    private final Request request;
    private final Client client;
    private final EmployeeDAO employeeDAO;

   
    public InvoiceFrame(CarServiceLogic logic, Request request, Client client, EmployeeDAO employeeDAO) {
        
        this.logic = logic;
        this.request = request;
        this.client = client;
        this.employeeDAO = employeeDAO;
        initComponents();
        populateTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        invoiceTableScrollPane = new javax.swing.JScrollPane();
        InvoiceTable = new javax.swing.JTable();
        saveButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Счёт");

        InvoiceTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "ФИО клиента", "Детали", "Услуги ", "Цена"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        invoiceTableScrollPane.setViewportView(InvoiceTable);

        saveButton.setText("Сохранить как...");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(invoiceTableScrollPane)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(527, Short.MAX_VALUE)
                .addComponent(saveButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(32, 32, 32))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(invoiceTableScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 306, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 147, Short.MAX_VALUE)
                .addComponent(saveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(42, 42, 42))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle("Сохранить счёт");
        fileChooser.setSelectedFile(new java.io.File("schet_" + request.getRequestId() + ".txt"));
        int userSelection = fileChooser.showSaveDialog(this);

        if (userSelection == JFileChooser.APPROVE_OPTION) {
            java.io.File file = fileChooser.getSelectedFile();
            try {
                Invoice invoice = logic.viewInvoice(request);
                logic.saveInvoiceToTxt(invoice, file);
                JOptionPane.showMessageDialog(this, "Счёт сохранён в: " + file.getAbsolutePath(), "Успех", JOptionPane.INFORMATION_MESSAGE);
                System.out.println("Счёт сохранён для заявки #" + request.getRequestId());
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, "Ошибка при сохранении счёта: " + ex.getMessage(), "Ошибка", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_saveButtonActionPerformed

    private void populateTable() {
        try {
            Invoice invoice = logic.viewInvoice(request);
            DefaultTableModel model = (DefaultTableModel) InvoiceTable.getModel();
            model.setRowCount(0); 

            // Получение списка деталей
            List<RequestPart> requestParts = new RequestPartDAO().getRequestPartsByRequestId(request.getRequestId());
            String partsList = "";
            boolean hasParts = false;
            for (RequestPart rp : requestParts) {
                Part part = new PartDAO().getPartById(rp.getPartId());
                if (part != null) {
                    if (hasParts) {
                        partsList += ", ";
                    }
                    partsList += part.getName();
                    hasParts = true;
                }
            }
            if (!hasParts) {
                partsList = "Нет заменённых деталей";
            }

            // Получение списка услуг
            List<RequestService> requestServices = new RequestServiceDAO().getRequestServicesByRequestId(request.getRequestId());
            String servicesList = "";
            boolean hasServices = false;
            for (RequestService rs : requestServices) {
                Service service = new ServiceDAO().getServiceById(rs.getServiceId());
                if (service != null) {
                    if (hasServices) {
                        servicesList += ", ";
                    }
                    servicesList += service.getSubcategory();
                    hasServices = true;
                }
            }
            if (!hasServices) {
                servicesList = "Нет услуг";
            }

            // Добавление строки с данными
            model.addRow(new Object[]{
                client.getFullName(),
                partsList,
                servicesList,
                invoice.getTotalAmount() + " руб."
            });

            setTitle("Счёт #" + invoice.getId()); 
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this, "Ошибка при создании счёта: " + ex.getMessage(), "Ошибка", JOptionPane.ERROR_MESSAGE);
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable InvoiceTable;
    private javax.swing.JScrollPane invoiceTableScrollPane;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JButton saveButton;
    // End of variables declaration//GEN-END:variables
}
